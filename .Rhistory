dat
# Initials
alpha = 0.05
# Reading data
dat = read.csv("mydata2_21var.csv", sep=";", header=F)
# Adjust data if necessary
dat = dat[, 1]
dat
N = length(dat)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
hist(dat)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(mydata), max(mydata), length=100)
#yfit = dnorm(xfit, mean=mean(mydata), sd=sd(mydata))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(mydata, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
sd(dat)
var(dat)
# Run my variant test function
ks_test_for_normal(dat, N)
ks_test_for_gamma(dat, N)
ks_test_for_exponential(dat, N)
ks_test_for_chisquare(dat, N)
# Confidence interval
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("mydata2_21var.csv", sep=";", header=F)
# Adjust data if necessary
dat = dat[, 1]
dat
N = length(dat)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
hist(dat)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(mydata), max(mydata), length=100)
#yfit = dnorm(xfit, mean=mean(mydata), sd=sd(mydata))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(mydata, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
sd(dat)
var(dat)
# Run my variant test function
ks_test_for_normal(dat, N)
ks_test_for_gamma(dat, N)
ks_test_for_exponential(dat, N)
ks_test_for_chisquare(dat, N)
# Confidence interval
acceptance_region = ks_acceptance_region()
###### ...
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("mydata2_21var.csv", sep=";", header=F)
# Adjust data if necessary
dat = dat[, 1]
dat
N = length(dat)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
hist(dat)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(mydata), max(mydata), length=100)
#yfit = dnorm(xfit, mean=mean(mydata), sd=sd(mydata))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(mydata, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
sd(dat)
var(dat)
# Run my variant test function
ks_test_for_normal(dat, N)
ks_test_for_gamma(dat, N)
ks_test_for_exponential(dat, N)
ks_test_for_chisquare(dat, N)
# Confidence interval
acceptance_region = ks_acceptance_region()
? cor.test
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1var.csv", sep=";", header=F)
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv", sep=";", header=F)
# Adjust data if necessary
dat = dat[, 1]
dat
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv", header=F)
dat
# Adjust data if necessary
dat = dat[, 1]
dat
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
dat
# Adjust data if necessary
dat = dat[, 1]
dat
N = length(dat)
N
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
(dat, xlab="x", ylab="y", main="Title of the plot")
# Plotting
plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
hist(dat)
summary(dat)
sd(dat)
var(dat)
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
dat
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
v1
v3
v2
v1N
v2N
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Building histogram
hist(dat)
hist(v1)
hist(v2)
# Building histogram
hist(dat[, 1])
# Summarizing
summary(dat)
summary(v1)
summary(v2)
# T-Student
ttestresult = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
ttestresult
(ttestresult)
critical_value_r = critical_value_r(ttestresult)
# Confidence interval
critical_value_l = student_critical_value_l(ttestresult)
critical_value_r = student_critical_value_r(ttestresult)
critical_value_l
critical_value_r
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic	# get WMW test statistic value = 361.5
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic
wmw_mean = mwm_mean(v1N, v2N)
wmw_sd = mwm_sd(v1N, v2N)
wmw_zvalue = mwm_zvalue()
wmw_standardized_zvalue = mwm_standardized_zvalue(wt, v1N, v2N)
wmw_acceptance_region = mwm_acceptance_region()
wmw_mean
wmw_sd
wmw_zvalue
wmw_standardized_zvalue
wmw_acceptance_region
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
#plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
#hist(dat[, 1])
hist(v1)
hist(v2)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(dat), max(dat), length=100)
#yfit = dnorm(xfit, mean=mean(dat), sd=sd(dat))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(dat, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
summary(v1)
summary(v2)
#sd(dat)
#var(dat)
# Run my variant test function
# T-Student
ttestresult = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
# Student Confidence interval
critical_value_l = student_critical_value_l(ttestresult)
critical_value_r = student_critical_value_r(ttestresult)
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic
wmw_mean = mwm_mean(v1N, v2N)
wmw_sd = mwm_sd(v1N, v2N)
wmw_zvalue = mwm_zvalue()
wmw_standardized_zvalue = mwm_standardized_zvalue(wt, v1N, v2N)
wmw_acceptance_region = mwm_acceptance_region()
# Kolmogorov
kt = ks.test(v1N, v2N, alternative = "two.side")
kt$statistic
kt$p.value
ks_tval = kt$statistic * sqrt((v1N * v2N)/(v1N + v2N))
ks_acceptance_reg = sqrt(-(1/2)*log(alpha/2))
### Boxplot
boxplot(v1N, v2N, names=c("v1", "v2"))
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
#plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
#hist(dat[, 1])
hist(v1)
hist(v2)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(dat), max(dat), length=100)
#yfit = dnorm(xfit, mean=mean(dat), sd=sd(dat))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(dat, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
summary(v1)
summary(v2)
#sd(dat)
#var(dat)
# Run my variant test function
# T-Student
ttestresult = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
# Student Confidence interval
critical_value_l = student_critical_value_l(ttestresult)
critical_value_r = student_critical_value_r(ttestresult)
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic
wmw_mean = mwm_mean(v1N, v2N)
wmw_sd = mwm_sd(v1N, v2N)
wmw_zvalue = mwm_zvalue()
wmw_standardized_zvalue = mwm_standardized_zvalue(wt, v1N, v2N)
wmw_acceptance_region = mwm_acceptance_region()
# Kolmogorov
kt = ks.test(v1, v2, alternative = "two.side")
kt$statistic
kt$p.value
ks_tval = kt$statistic * sqrt((v1N * v2N)/(v1N + v2N))
ks_acceptance_reg = sqrt(-(1/2)*log(alpha/2))
### Boxplot
boxplot(v1, v2, names=c("v1", "v2"))
kt
ks_tval
ks_acceptance_reg
ttestresult
wt
kt
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Plotting
#plot(dat, xlab="x", ylab="y", main="Title of the plot")
# Building histogram
#hist(dat[, 1])
hist(v1)
hist(v2)
# add more lines on the histogram (for example, to show the normal distribution red line)
#xfit = seq(min(dat), max(dat), length=100)
#yfit = dnorm(xfit, mean=mean(dat), sd=sd(dat))
#yfit = yfit * diff(h$mids[1:2]) * length(yfit)
#h = hist(dat, ylim=c(0, max(yfit)))
#lines(xfit, yfit, col="red", lwd=2)
# Summarizing
summary(dat)
summary(v1)
summary(v2)
#sd(dat)
#var(dat)
# Run my variant test function
# T-Student
st = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
# Student Confidence interval
st_critical_value_l = student_critical_value_l(st)
st_critical_value_r = student_critical_value_r(st)
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic
wmw_mean = mwm_mean(v1N, v2N)
wmw_sd = mwm_sd(v1N, v2N)
wmw_zvalue = mwm_zvalue()
wmw_standardized_zvalue = mwm_standardized_zvalue(wt, v1N, v2N)
wmw_acceptance_region = mwm_acceptance_region()
# Kolmogorov
kt = ks.test(v1, v2, alternative = "two.side")
kt$statistic
kt$p.value
ks_tval = kt$statistic * sqrt((v1N * v2N)/(v1N + v2N))
ks_acceptance_reg = sqrt(-(1/2)*log(alpha/2))
### Boxplot
boxplot(v1, v2, names=c("v1", "v2"))
st
wt
kt
st_critical_value_l
wt$statistic
wmw_mean
wmw_sd
wmw_zvalue
wmw_standardized_zvalue
wmw_acceptance_region
kt$statistic
kt$p.value
ks_tval
ks_acceptance_reg
summary(v1)
summary(v2)
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Building histogram
#hist(dat[, 1])
hist(v1)
hist(v2)
# Summarizing
summary(dat)
summary(v1)
summary(v2)
#sd(dat)
#var(dat)
# T-Student
st = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
# Student Confidence interval
st_critical_value_l = qt(alpha/2, st$parameter) # -1.981872
st_critical_value_r = qt(1-alpha/2, st$parameter) # 1.981872
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic # 3987
wmw_mean = (v1N*v2N)/2 # 5000
wmw_sd = sqrt((1/12)*v1N*v2N*(v1N+v2N+1)) # 409.2676
wmw_standardized_zvalue = (wt$statistic - wmw_mean) / wmw_sd # -2.475153
wmw_acceptance_region = qnorm(1-alpha/2) # (-1.959964; +1.959964)
# Kolmogorov
kt = ks.test(v1, v2, alternative = "two.side")
kt$statistic # 0.31
kt$p.value # 0.000134
ks_tval = kt$statistic * sqrt((v1N * v2N)/(v1N + v2N)) # 2.192031
ks_acceptance_reg = sqrt(-(1/2)*log(alpha/2)) # 1.358102
### Boxplot
boxplot(v1, v2, names=c("v1", "v2"))
wmw_mean
wmw_sd
wmw_acceptance_region
wmw_standardized_zvalue
kt
kt$statistic
kt$p.value
ks_tval
ks_acceptance_reg
st_critical_value_l
st_critical_value_r
wt
###### ...
# Initials
alpha = 0.05
# Reading data
dat = read.csv("2_1.csv")
# Adjust data if necessary
#dat = dat[, 1]
dat
N = length(dat)
v1 = dat$V1
v1N = length(v1)
v2 = dat$V2
v2N = length(v2)
# Useful functions
source("F:/dev/R/Labworks/exam_helpers_script.R")
# Building histogram
#hist(dat[, 1])
hist(v1)
hist(v2)
# Summarizing
summary(dat)
summary(v1)
summary(v2)
#sd(dat)
#var(dat)
# T-Student
st = t.test(v1, v2, alternative = "two.sided", var.equal = FALSE)
# Student Confidence interval
st_critical_value_l = qt(alpha/2, st$parameter) # -1.981872
st_critical_value_r = qt(1-alpha/2, st$parameter) # 1.981872
# Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(v1, v2, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic # 3987
wmw_mean = (v1N*v2N)/2 # 5000
wmw_sd = sqrt((1/12)*v1N*v2N*(v1N+v2N+1)) # 409.2676
wmw_standardized_zvalue = (wt$statistic - wmw_mean) / wmw_sd # -2.475153
wmw_acceptance_region = qnorm(1-alpha/2) # (-1.959964; +1.959964)
# Kolmogorov
kt = ks.test(v1, v2, alternative = "two.side")
kt$statistic # 0.31
kt$p.value # 0.000134
ks_tval = kt$statistic * sqrt((v1N * v2N)/(v1N + v2N)) # 2.192031
ks_acceptance_reg = sqrt(-(1/2)*log(alpha/2)) # 1.358102
### Boxplot
boxplot(v1, v2, names=c("v1", "v2"))
st
wt
kt
summary(v1)
summary(v2)
st
wt
kt
