ks_val_print(gammaksresult, "gamma dist")
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
ks_val_print(chiksresult, "chisq dist")
######## Approximate method
#for quanite calculation use command 'qnorm(p)'
skewness(mydata) < acceptanceRegion * sd(mydata)
skewness(mydata) < acceptance_region * sd(mydata)
skewness(mydata) < acceptance_region * sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3)))
kurtosis(mydata) < acceptance_region * sqrt(4*(N^2-1)*v_skew^2 / ((N-3)*(N+5)))
skewness(mydata) < acceptance_region * v_skew
v_skew = sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3))) # must be nearly equal to others
v_kur = sqrt(4*(N^2-1)*v_skew^2 / ((N-3)*(N+5))) # must be less than one
skewness(mydata) < acceptance_region * v_skew
kurtosis(mydata) < acceptance_region * v_kur
acceptance_region
coefficient_skew = sqrt((6*(N-2))/((N+1)*(N+3)))
coefficient_kur = sqrt(((24*N)*(N-2)*(N-3))/((N+1)^2*(N+3)*(N+5)))
coefficient_kur
coefficient_skew
skewness(mydata) < qnorm(1 - alpha/2) * coefficient_skew
kurtosis(mydata) + 6/(n+1) < qnorm(1-alpha/2)*coefficient_kur
kurtosis(mydata) + 6/(N+1) < qnorm(1-alpha/2)*coefficient_kur
Q*coefficient_kur
(1-alpha/2)*coefficient_kur
(1-alpha/2)*coefficient_skew
chiksresult
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("K.S (test value) for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("K.S (test value) for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("K.S (test value) for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("K.S (test value) for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
ksresult
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
coefficient_skew = sqrt((6*(N-2))/((N+1)*(N+3)))
coefficient_kur = sqrt(((24*N)*(N-2)*(N-3))/((N+1)^2*(N+3)*(N+5)))
coefficient_kur
coefficient_skew
quantile(mydata, 0.05)
quantile(mydata, 0.95)
quantile(mydata, 0.05)
? quantile
1-0.05/2
skewness(mydata)
skewness(mydata)
library("fBasics")		# load
skewness(mydata)
coefficient_kur
skewness(mydata)
kurtosis(mydata)
coefficient_kur
qnorm(0.05)
qnorm(0.05, mean(mydata), sd(mydata))
quantile(mydata, 0.05)
quantile(mydata, 0.95)
qnorm(0.95, mean(mydata), sd(mydata))
kurtosis(mydata) + 6/(N+1)
qnorm(1-alpha/2)*coefficient_kur
(1-alpha/2)*coefficient_kur
qnorm(1)
qnorm(0)
qnorm(0.3)
qnorm(0.4)
qnorm(0.5)
pnorm(0.5)
pnorm(0.5)
pnorm(0.6)
pnorm(0.05)
quantile(mydata, 0.05)
pnorm(1-alpha/2)*coefficient_kur
pnorm(1-alpha/2)*coefficient_skew
1-alpha/2
acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
cdf(0.5)
quantile(0.2)
quantile(mydata,0.2)
(1-alpha/2)*coefficient_skew
(1-alpha/2)*coefficient_kur
#acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
#acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew = (1-alpha/2)*coefficient_skew
acceptance_region_kur = (1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
qnorm(0.5)
qnorm(1-alpha/2)
pnorm(1.959964)
alpha/2
acceptance_region * sqrt(N)
acceptance_region / sqrt(N)
acceptance_region
acceptance_region_kur
t.test(mydata, conf.level=0.95)$conf.int
t.test(mydata, conf.level=0.95)
qnorm(1-alpha/2)
#acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
#acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
#acceptance_region_skew = (1-alpha/2)*coefficient_skew
#acceptance_region_kur = (1-alpha/2)*coefficient_kur
acceptance_region_skew = qnorm(1-alpha/2)*coefficient_skew
acceptance_region_kur = qnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
skewness(mydata)
kurtosis(mydata)
pnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_skew
skewness(mydata)
qnorm(1-alpha/2)*coefficient_kur
kurtosis(mydata)
qnorm(1-alpha/2, mean(mydata), sd(mydata))*coefficient_kur
qnorm(1-alpha/2*coefficient_kur
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)
quantile(0.95)
quantile(mydata,0.95)
1-alpha/2
qnorm(1-alpha/2)
pnorm(1.959964)
coefficient_kur
coefficient_skew
coefficient_skew*qnorm(1-alpha/2)
coefficient_kur*qnorm(1-alpha/2)
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
standard_normal_dist_quantile = qnorm(1-alpha/2)
standard_normal_dist_quantile
pnorm(1-0.1/2)
pnorm(0.1/2)
qnorm(1-0.1/2)
qnorm(1-alpha/2)
skewness(mydata)
skew_standard_error = sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3))) # must be nearly equal to others
kur_standard_error = sqrt(4*(N^2-1)*skew_standard_error^2 / ((N-3)*(N+5))) # must be less than one
skewness + skew_standard_error < acceptance_region_skew
(skewness + skew_standard_error) < acceptance_region_skew
skewness(mydata) + skew_standard_error < acceptance_region_skew
kurtosis(mydata) + kur_standard_error < acceptance_region_kur
mydata
? sample
# x - 1st set
# y - 2nd set
# mysample_index = sample(seq_len(nrow(mydata), size = nrow(mydata)))
x = mydata[1:25]
y = mydata[26:50]
x
y
# x - 1st set
# y - 2nd set
# mysample_index = sample(seq_len(nrow(mydata), size = nrow(mydata)))
x = mydata[c(1:25)]
y = mydata[c(26:50)]
x
y
# x - 1st set
# y - 2nd set
# mysample_index = sample(seq_len(nrow(mydata), size = nrow(mydata)))
x = mydata[1:25]
y = mydata[26:50]
x
y
### t-Student's test for homogeneity
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
### t-Student's test for homogeneity
ttestresult = t.test(x, y, alternative = "two.sided", var.equal = FALSE)
ttestresult
ttestresult$statistic
qnorm(len(x) + len(y) - 2)
qnorm(length(x) + length(y) - 2)
length(x) + length(y) - 2
t.test(mydata, conf.level=0.95)$conf.int
t.test(mydata, conf.level=0.95)
### t-Student's test for homogeneity
ttestresult = t.test(x, y, alternative = "two.sided", var.equal = FALSE)
ttestresult
acceptance_region
Ñ‡
x
y
### t-Student's test for homogeneity
ttestresult = t.test(x, y, alternative = "two.sided", var.equal = FALSE)
alpha = 0.05
ttestresult
### Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(x, y, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt
1-alpha/2
qt ?
q
? qr
? qt
ttesttresult$
q
ttestresult
? t.test
qt(alpha/2, ttestresult$parameter)
qt(1-alpha/2, ttestresult$parameter)
### Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(x, y, alternative = "two.sided", correct = FALSE)
attributes(wt)	# get names of all test parameters
wt$statistic	# get WMW test statistic value
wt
critical_value_l = qt(alpha/2, ttestresult$parameter)
critical_value_r = qt(1-alpha/2, ttestresult$parameter)
critical_value_l
critical_value_r
? wilcox.test
wt$parameter
qnorm(1-alpha/2)
qnorm(alpha/2)
alpha/2
? qwilcox
mwm_zvalue = qnorm(alpha/2)
mwm_zvalue
mwm_zvalue = qnorm(1-alpha/2)
mwm_zvalue
wt$statistic
(wt$statistic-mean(mydata))/sd(mydata)
### Kolmogorov-Smirnov test for homogeneity
ks.test(x, y, alternative = "two.side")
### Boxplot
boxplot(x, y, names=c("x", "y"))
wt$statistic	# get WMW test statistic value
### Kolmogorov-Smirnov test for homogeneity
ks.test(x, y, alternative = "two.side")
ks_acceptance_region = sqrt(-log(alpha/2)/2)
ks_acceptance_region
sqrt(-(1/2)*log(alpha/2))
mwm_sigma = (1/12)*length(x)*length(y)*(length(x)+length(y)+1)
mwm_sigma
mwm_sigma = sqrt((1/12)*length(x)*length(y)*(length(x)+length(y)+1))
mwm_sigma
mwm_mean = (N1*N2)/2
mwm_sd = sqrt((1/12)*N1*N2*(N1+N2+1))
mwm_zvalue = qnorm(1-alpha/2)
N1 = length(x)
N2 = length(y)
mwm_mean = (N1*N2)/2
mwm_sd = sqrt((1/12)*N1*N2*(N1+N2+1))
mwm_zvalue = qnorm(1-alpha/2)
mwm_mean
mwm_sd
wilcox.test(x, y, alternative = "two.sided", correct = FALSE)
mwm_zvalue2 = (wt$statistic - mwm_mean) / mwm_sd
mwm_zvalue2
mwm_zvalue
wt$statistic
? wilcoxonZ
?? wilcoxonZ
### Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(x, y, alternative = "two.sided", correct = FALSE)
wt
qnorm(wt$p.value)
qnorm(1-alpha/2)
1-alpha/2
alpha/2
qnorm(-1.9)
qnorm(1.9)
qnorm(0.05)
mwm_zvalue2
wt$statistic
wt$statistic$int
wt$statistic$.int
wt$statistic.int
int(wt$statistic)
wt$statistic
mwm_zvalue2
qnorm(0.05)
qnorm(0.57)
1-qnorm(0.57)
1-(1-qnorm(0.57))
pnorm(0.57)
pnorm(wt$p.value)
pnorm(mwm_zvalue2)
qnorm(mwm_zvalue2)
qnorm(0.8291317)
### Kolmogorov-Smirnov test for homogeneity
kt = ks.test(x, y, alternative = "two.side")
ks_tvalue = kt$statistic * sqrt((N1 * N2)/N1 + N2)
ks_tvalue
ks_acceptance_region
mwm_acceptance_region = qnorm(1-alpha/2)
mwm_acceptance_region
ks_acceptance_region = sqrt(-log(alpha/2)/2)
kt
wt
mwm_standardized_zvalue = (wt$statistic - mwm_mean) / mwm_sd
mwm_standardized_zvalue
mwm_zvalue
pnorm(mwm_standardized_zvalue)
qnorm(mwm_standardized_zvalue)
pnorm(0.57)
mvm_standardized_zvalue
mwm_standardized_zvalue
mwm_standardized_zvalue
mwm_zvalue
(wt$statistic - mean(mydata)) / sd(mydata)
wt$statistic
qnorm(0.99)
qnorm(0.5)
qnorm(0.9)
qnorm(0.8)
qnorm(0.7)
qnorm(0.6)
qnorm(0.5)
qnorm(0.9)
critical_value_l
ks_tvalue = kt$statistic * sqrt((N1 * N2)/N1 + N2)
ks_tvalue
ks_acceptance_region
mwm_acceptance_region
mwm_standardized_zvalue
mwm_zvalue
mwm_sd
mwm_mean
kt
ks
kt
ks_tvalue
ks_tvalue = kt$statistic * sqrt((N1 * N2)/(N1 + N2)) #  = 1.697056
ks_tvalue
git status
quantile(x)
quantile(y)
acceptance_region
adjusted_acceptance_region
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(expksresult, "exponential dist") # D = test value = 0.06808534
ks_val_print(uniformksresult, "uniform dist") #
ks_val_print(gammaksresult, "gamma dist") # D = test value =
ks_val_print(chiksresult, "chisq dist")
coefficient_skew
coefficient_kur
standard_normal_dist_quantile
acceptance_region
sk
kurt
acceptance_region_skew
acceptance_region_kur
wt
attributes(wt)
kt
### Wilcoxon-Mann-Whitney test for homogeneity
wt = wilcox.test(x, y, alternative = "two.sided", correct = FALSE)
wt
length(x)*length(y)
4+6+7
1+2+3+5
coefficient_kur
kurtosis(mydata) + (6/(N+1))
library("fBasics")		# load
kurtosis(mydata) + (6/(N+1))
adjusted_kur = kurtosis(mydata) + (6/(N+1))
adjusted_kur
v_skew
kurtosis(mydata) / v_kur
skewness(mydata) / v_skew
skewness(mydata) / v_skew # = 0.4558355
kurtosis(mydata) / v_kur # = -0.2804042
skew_with_se = skewness(mydata) / v_skew # = 0.4558355
kur_with_se = kurtosis(mydata) / v_kur # = -0.2804042
skew_with_se
kur_with_se
skew_with_se < acceptance_region_skew
kur_with_se < acceptance_region_kur
ks_val_print(normksresult, "normal dist") # D = test value = 0.068085
0.9/0.34
acceptance_region = sqrt(-(1/2)*log(alpha/2)) # = 1.358102
adjusted_acceptance_region = acceptance_region / sqrt(N) # = 0.1920646
skew_standard_error = sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3))) # must be nearly equal to others
kur_standard_error = sqrt(4*(N^2-1)*skew_standard_error^2 / ((N-3)*(N+5))) # must be less than one
z = mydata[["Passengers"]]
mydata = read.csv("Data_21var.csv")
x = mydata[["Spec_Length"]]
y = mydata[["Energy"]]
z = mydata[["Passengers"]]
Ñ‡
x
y
z
plot(x, y, xlab="x", ylab="y", main="Correlation between X and Y") # scatter plot
# Add trend line to the plot
lm.out = lm(y ~ x)
abline(lm.out, col="red")
# Add 95% confidence intervals for the trend line
newx = seq(min(x),max(x),by = 0.05)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
cor.test(x, y)
##### Partial correlation coefficients
source("F:/dev/R/Labworks/pcor.R")
pcor.test(x, y, z)
plot(x, z, xlab="x", ylab="z", main="Correlation between X and Z")
lm.out = lm(z ~ x)
abline(lm.out, col="red")
newx = seq(min(x),max(x),by=0.05)
lines(newx, conf_interval[,2],col="blue", lty=2)
lines(newx, conf_interval[,3],col="blue", lty=2)
plot(x, y, xlab="x", ylab="y", main="Correlation between X and Y") # scatter plot
# Add trend line to the plot
lm.out = lm(y ~ x)
abline(lm.out, col="red")
# Add 95% confidence intervals for the trend line
newx = seq(min(x),max(x),by = 0.05)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
plot(x, z, xlab="x", ylab="z", main="Correlation between X and Z")
lm.out = lm(z ~ x)
abline(lm.out, col="red")
newx = seq(min(x),max(x),by=0.05)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2],col="blue", lty=2)
lines(newx, conf_interval[,3],col="blue", lty=2)
plot(y, z, xlab="y", ylab="z", main="Correlation between Y and Z")
lm.out = lm(z ~ y)
abline(lm.out, col="red")
newy = seq(min(y), max(y), by=0.05)
conf_interval = predict(lm.out, newdata=data.frame(y=newy), interval="confidence",
level = 0.95)
lines(newy, conf_interval[,2],col="blue", lty=2)
lines(newy, conf_interval[,3],col="blue", lty=2)
cor.test(x, y)
cor.test(x, z)
cor.test(y, z)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
# Add 95% confidence intervals for the trend line
newx = seq(min(x),max(x),by = 0.05)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
# Add trend line to the plot
lm.out = lm(y ~ x)
plot(x, y, xlab="x", ylab="y", main="Correlation between X and Y") # scatter plot
# Add trend line to the plot
lm.out = lm(y ~ x)
abline(lm.out, col="red")
# Add 95% confidence intervals for the trend line
newx = seq(min(x),max(x),by = 0.05)
conf_interval = predict(lm.out, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
cat("Condidence interval for x-y", conf_interval)
