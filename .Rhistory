# Normal distribution
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata)).$statistic
# Normal distribution
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata)).$d
? ks.test
1/sqrt(n) * sqrt(-(1/2)*log(0.05/2))
1/sqrt(50) * sqrt(-(1/2)*log(0.05/2))
ks_val = 1/sqrt(n) * sqrt(-(1/2)*log(0.05/2))
ks_val = 1/sqrt(N) * sqrt(-(1/2)*log(0.05/2))
cat("Ks_val for normal dist is", ks_val)
ks_val = 1/sqrt(N) * acceptanceRegion
ks_val
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))$p.value
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))$statistic
ks_val = ksresult$statistic * sqrt(50)
# Normal distribution
ksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val = ksresult$statistic * sqrt(50)
cat("Ks_val for normal dist is", ks_val)
ks_val <- function(ksresult) {
return(ksresult$statistic * sqrt(50))
}
# Normal distribution
ksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
cat("Ks_val for normal dist is", ks_val(ksresult))
# Exponential distribution
ksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
cat("Ks_val for exponential dist is", ks_val(ksresult))
# Uniform distribution
ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
cat("Ks_val for uniform dist is", ks_val(ksresult))
# Uniform distribution
ksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
cat("Ks_val for uniform dist is", ks_val(ksresult))
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
cat("Ks_val for normal dist is", ks_val(normksresult))
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
cat("Ks_val for exponential dist is", ks_val(expksresult))
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
cat("Ks_val for uniform dist is", ks_val(uniformksresult))
acceptanceRegion
adjustedAcceptanceRegion
N = length(mydata)
adjustedAcceptanceRegion = 1/sqrt(N) * acceptanceRegion
adjustedAcceptanceRegion
acceptanceRegion = sqrt(-(1/2)*log(0.05/2))
acceptanceRegion
cat("Ks_val for normal dist is", ks_val(normksresult))
if (val < accep)
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range")
}
}
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
ks_val_print(expksresult, "exponential dist")
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(normksresult, "normal dist")
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
ks_val_print(expksresult, "exponential dist")
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
ks_val_print(uniformksresult, "uniform dist")
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
gammaksresult = ks.test(mydata, "pgamma", shape=k, rate=l)
ks_val_print(gammaksresult, "gamma dist")
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
ks_val_print(chiksresult, "chisq dist")
alpha = 0.05
acceptanceRegion = sqrt(-(1/2)*log(alpha/2))
N = length(mydata)
adjustedAcceptanceRegion = 1/sqrt(N) * acceptanceRegion
ks_val <- function(ksresult) {
return(ksresult$statistic * sqrt(50))
}
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
}
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
ks_val_print(expksresult, "exponential dist")
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", adjustedAcceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val <- function(ksresult) {
return(ksresult$statistic)
}
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < adjustedAcceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", adjustedAcceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", adjustedAcceptanceRegion,")")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
alpha = 0.05
acceptanceRegion = sqrt(-(1/2)*log(alpha/2))
N = length(mydata)
adjustedAcceptanceRegion = 1/sqrt(N) * acceptanceRegion
ks_val <- function(ksresult) {
return(ksresult$statistic * sqrt(50))
}
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
}
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
ks_val_print(expksresult, "exponential dist")
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
ks_val_print(uniformksresult, "uniform dist")
# Gamma distribution
library(e1071) # package is used to calculate skewness and kurtosis
sk = skewness(mydata)
k = sqrt(2)/sk
l = k/mean(mydata)
gammaksresult = ks.test(mydata, "pgamma", shape=k, rate=l)
ks_val_print(gammaksresult, "gamma dist")
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
ks_val_print(chiksresult, "chisq dist")
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptanceRegion,")")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
if (ksresult$statistic < acceptanceRegion) {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is in the acceptance range (", acceptanceRegion,")")
} else {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is NOT in the acceptance range (", acceptanceRegion,")")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptanceRegion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptanceRegion,")\n")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptanceRegion,")\n")
}
if (ksresult$statistic < acceptanceRegion) {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is in the acceptance range (", acceptanceRegion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is NOT in the acceptance range (", acceptanceRegion,")\n")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
alpha = 0.01
acceptanceRegion = sqrt(-(1/2)*log(alpha/2))
acceptanceRegion
q
N = length(mydata)
alpha = 0.1
acceptanceRegion = sqrt(-(1/2)*log(alpha/2))
acceptanceRegion
alpha = 0.05
acceptanceRegion = sqrt(-(1/2)*log(alpha/2))
N = length(mydata)
acceptanceRegion
acceptanceRegion / sqrt(N)
adjustedAcceptanceRegion = acceptanceRegion / sqrt(N)
adjustedAcceptanceRegion
adjustedAcceptanceRegion
acceptanceRegion
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
normksresult
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
gammaksresult = ks.test(mydata, "pgamma", shape=k, rate=l)
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
expksresult
uniformksresult
normksresult
gammaksresult
chiksresult
normksresult
chiksresult
sk
k
kurt = kurtosis(mydata)
library("fBasics")		# load
sk = skewness(mydata)
kurt = kurtosis(mydata)
kurtosis
kurt
sk
sk < acceptanceRegion
acceptanceRegion
x.norm
sk < acceptanceRegion * sd(mydata)
sd(mydata)
skewness(mydata) < acceptanceRegion * sd(mydata)
rm(list = ls())	# clean all objects from the workspace
# command ‘ls()’ shows you names of all used variables
mydata = read.csv("mydata2_21var.csv", header=F)
mydata = mydata[, 1]
mydata
########## KOLMOGOROV-SMIRNOV TEST
# Null hypothesis is that mydata distribution is normal
# Alternative hypothesis is that mydata distribution is NOT normal
#ul = mean(mydata) -
alpha = 0.05
acceptance_region = sqrt(-(1/2)*log(alpha/2))
N = length(mydata)
adjusted_acceptance_region = acceptance_region / sqrt(N)
ks_val <- function(ksresult) {
return(ksresult$statistic * sqrt(50))
}
ks_val_print <- function(ksresult, distname) {
val = ks_val(ksresult)
if (val < acceptance_region) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", acceptance_region,")\n")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", acceptance_region,")\n")
}
if (ksresult$statistic < acceptance_region) {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is in the acceptance range (", acceptance_region,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$statistic, "and is NOT in the acceptance range (", acceptance_region,")\n")
}
}
# Normal distribution
normksresult = ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
# Exponential distribution
expksresult = ks.test(mydata, "pexp", rate=1/mean(mydata))
ks_val_print(expksresult, "exponential dist")
# Uniform distribution
uniformksresult = ks.test(mydata, "punif", min=min(mydata), max=max(mydata))
ks_val_print(uniformksresult, "uniform dist")
# Gamma distribution
library(e1071) # package is used to calculate skewness and kurtosis
library("fBasics")		# load
sk = skewness(mydata)
kurt = kurtosis(mydata)
k = sqrt(2)/sk
l = k/mean(mydata)
gammaksresult = ks.test(mydata, "pgamma", shape=k, rate=l)
ks_val_print(gammaksresult, "gamma dist")
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
ks_val_print(chiksresult, "chisq dist")
######## Approximate method
#for quanite calculation use command 'qnorm(p)'
skewness(mydata) < acceptanceRegion * sd(mydata)
skewness(mydata) < acceptance_region * sd(mydata)
skewness(mydata) < acceptance_region * sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3)))
kurtosis(mydata) < acceptance_region * sqrt(4*(N^2-1)*v_skew^2 / ((N-3)*(N+5)))
skewness(mydata) < acceptance_region * v_skew
v_skew = sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3))) # must be nearly equal to others
v_kur = sqrt(4*(N^2-1)*v_skew^2 / ((N-3)*(N+5))) # must be less than one
skewness(mydata) < acceptance_region * v_skew
kurtosis(mydata) < acceptance_region * v_kur
acceptance_region
coefficient_skew = sqrt((6*(N-2))/((N+1)*(N+3)))
coefficient_kur = sqrt(((24*N)*(N-2)*(N-3))/((N+1)^2*(N+3)*(N+5)))
coefficient_kur
coefficient_skew
skewness(mydata) < qnorm(1 - alpha/2) * coefficient_skew
kurtosis(mydata) + 6/(n+1) < qnorm(1-alpha/2)*coefficient_kur
kurtosis(mydata) + 6/(N+1) < qnorm(1-alpha/2)*coefficient_kur
Q*coefficient_kur
(1-alpha/2)*coefficient_kur
(1-alpha/2)*coefficient_skew
chiksresult
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("Ks_val for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Ks_val for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("K.S (test value) for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("K.S (test value) for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
ks.test(mydata, "pnorm", mean=mean(mydata), sd=sd(mydata))
ks_val_print(normksresult, "normal dist")
ks_val_print <- function(ksresult, distname) {
#val = ks_val(ksresult)
val = ksresult$statistic
aregion = adjusted_acceptance_region
if (val < aregion) {
cat("K.S (test value) for", distname, "is", val, "and is in the acceptance range (", aregion,")\n")
} else {
cat("K.S (test value) for", distname, "is", val, "and is NOT in the acceptance range (", aregion,")\n")
}
if (ksresult$p.value < aregion) {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is in the acceptance range (", aregion,")\n")
} else {
cat("Pvalue for", distname, "is", ksresult$p.value, "and is NOT in the acceptance range (", aregion,")\n")
}
ksresult
}
ks_val_print(normksresult, "normal dist")
ks_val_print(expksresult, "exponential dist")
ks_val_print(uniformksresult, "uniform dist")
ks_val_print(gammaksresult, "gamma dist")
ks_val_print(chiksresult, "chisq dist")
coefficient_skew = sqrt((6*(N-2))/((N+1)*(N+3)))
coefficient_kur = sqrt(((24*N)*(N-2)*(N-3))/((N+1)^2*(N+3)*(N+5)))
coefficient_kur
coefficient_skew
quantile(mydata, 0.05)
quantile(mydata, 0.95)
quantile(mydata, 0.05)
? quantile
1-0.05/2
skewness(mydata)
skewness(mydata)
library("fBasics")		# load
skewness(mydata)
coefficient_kur
skewness(mydata)
kurtosis(mydata)
coefficient_kur
qnorm(0.05)
qnorm(0.05, mean(mydata), sd(mydata))
quantile(mydata, 0.05)
quantile(mydata, 0.95)
qnorm(0.95, mean(mydata), sd(mydata))
kurtosis(mydata) + 6/(N+1)
qnorm(1-alpha/2)*coefficient_kur
(1-alpha/2)*coefficient_kur
qnorm(1)
qnorm(0)
qnorm(0.3)
qnorm(0.4)
qnorm(0.5)
pnorm(0.5)
pnorm(0.5)
pnorm(0.6)
pnorm(0.05)
quantile(mydata, 0.05)
pnorm(1-alpha/2)*coefficient_kur
pnorm(1-alpha/2)*coefficient_skew
1-alpha/2
acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
cdf(0.5)
quantile(0.2)
quantile(mydata,0.2)
(1-alpha/2)*coefficient_skew
(1-alpha/2)*coefficient_kur
#acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
#acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew = (1-alpha/2)*coefficient_skew
acceptance_region_kur = (1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
qnorm(0.5)
qnorm(1-alpha/2)
pnorm(1.959964)
alpha/2
acceptance_region * sqrt(N)
acceptance_region / sqrt(N)
acceptance_region
acceptance_region_kur
t.test(mydata, conf.level=0.95)$conf.int
t.test(mydata, conf.level=0.95)
qnorm(1-alpha/2)
#acceptance_region_skew = pnorm(1-alpha/2)*coefficient_skew
#acceptance_region_kur = pnorm(1-alpha/2)*coefficient_kur
#acceptance_region_skew = (1-alpha/2)*coefficient_skew
#acceptance_region_kur = (1-alpha/2)*coefficient_kur
acceptance_region_skew = qnorm(1-alpha/2)*coefficient_skew
acceptance_region_kur = qnorm(1-alpha/2)*coefficient_kur
acceptance_region_skew
acceptance_region_kur
skewness(mydata)
kurtosis(mydata)
pnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_skew
skewness(mydata)
qnorm(1-alpha/2)*coefficient_kur
kurtosis(mydata)
qnorm(1-alpha/2, mean(mydata), sd(mydata))*coefficient_kur
qnorm(1-alpha/2*coefficient_kur
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_kur
qnorm(1-alpha/2)*coefficient_skew
qnorm(1-alpha/2)
quantile(0.95)
quantile(mydata,0.95)
1-alpha/2
qnorm(1-alpha/2)
pnorm(1.959964)
coefficient_kur
coefficient_skew
coefficient_skew*qnorm(1-alpha/2)
coefficient_kur*qnorm(1-alpha/2)
# Chi-square distribution
chiksresult = ks.test(mydata, "pchisq", df=mean(mydata))
standard_normal_dist_quantile = qnorm(1-alpha/2)
standard_normal_dist_quantile
pnorm(1-0.1/2)
pnorm(0.1/2)
qnorm(1-0.1/2)
qnorm(1-alpha/2)
skewness(mydata)
skew_standard_error = sqrt(6*N*(N-1) / ((N-2)*(N+1)*(N+3))) # must be nearly equal to others
kur_standard_error = sqrt(4*(N^2-1)*skew_standard_error^2 / ((N-3)*(N+5))) # must be less than one
skewness + skew_standard_error < acceptance_region_skew
(skewness + skew_standard_error) < acceptance_region_skew
skewness(mydata) + skew_standard_error < acceptance_region_skew
kurtosis(mydata) + kur_standard_error < acceptance_region_kur
