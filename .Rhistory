vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
library(smooth)
library(Mcomp)
library(TTR)
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = read.csv("V01.csv", sep=";")
y = dat$Y
xs = dat[-ncol(dat)]
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
forecast(sm)$lower[1]
forecast(sm)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
tsdat
git status
library(smooth)
library(Mcomp)
library(TTR)
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = read.csv("V01.csv", sep=";")
y = dat$Y
xs = dat[-ncol(dat)]
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
forecast(sm)$lower[1]
forecast(sm)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
AirPassengers
library(smooth)
library(Mcomp)
library(TTR)
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = AirPassengers
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
forecast(sm)$lower[1]
forecast(sm)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
dat
? cycle
tsdat
tsdat
JohnsonJohnson
library(smooth)
library(Mcomp)
library(TTR)
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = JohnsonJohnson
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
forecast(sm)$lower[1]
forecast(sm)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = AirPassengers
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm)
fc = forecast(sm)$forecast
forecast(sm)$lower[1]
forecast(sm)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
dat
JohnsonJohnson
PetrolPrice
LakeHuron
UKDriverDeaths
USAssDeaths
USAccDeaths
lynx
mdeaths
fdeaths
nottem
sunspot.month
sunspots
treering
discoveries
austresw
austres
UKgas
dat
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = AirPassengers
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm1 = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm1)
fc = forecast(sm1)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc) # analysis of SMA model
# SMA (the last observation)
sm2 = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm2)
fc = forecast(sm2)$forecast
forecast(sm2)$lower[1]
forecast(sm2)$upper[1]
errors(as.numeric(tsdat)[N], fc) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = AirPassengers
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm1 = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm1)
fc1 = forecast(sm1)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc1) # analysis of SMA model
# SMA (the last observation)
sm2 = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm2)
fc2 = forecast(sm2)$forecast
forecast(sm2)$lower[1]
forecast(sm2)$upper[1]
errors(as.numeric(tsdat)[N], fc2) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
fc1
fc2
fc2
sm2
forecast(sm2)
errors(as.numeric(tsdat)[N], fc2) # analysis of SMA model
fc2
library(smooth)
library(Mcomp)
library(TTR)
errors = function(actual, predicted){
d = actual-predicted
mse = mean((d)^2)
mae = mean(abs(d))
mape = mean(abs(d/actual))*100
rmse = sqrt(mse)
return(cat(" MAE:", mae, "\n", "MSE:", mse, "\n",
"MAPE:", mape, "%", "\n", "RMSE:", rmse, "\n"))
}
##################################################
### dat - loaded data set
dat = AirPassengers
# Create time series of your data
tsdat = ts(dat) 	# only if necessary
# Plot data
plot.ts(tsdat)
# Boxplot
boxplot(tsdat ~ cycle(tsdat))
### Autocorrelation coefficient
acfRes = acf(tsdat) # autocorrelation
pacfRes = pacf(tsdat)  # partial autocorrelation
### MOVING AVERAGE
plot.ts(tsdat)
tsdatSMA3 = SMA(tsdat,n=3)	# lag 3
tsdatSMA5 = SMA(tsdat,n=5)	# lag 5
tsdatSMA10 = SMA(tsdat,n=10)	# lag 10
lines(tsdatSMA3, col="red")
lines(tsdatSMA5, col="green")
lines(tsdatSMA10, col="blue")
### SIMPLE MOVING AVERAGE (built-in functions)
N = length(as.numeric(tsdat))
# SMA (last 10 observations)
sm1 = sma(tsdat, h=10, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm1)
fc1 = forecast(sm1)$forecast
errors(as.numeric(tsdat)[(N-9):N], fc1) # analysis of SMA model
# SMA (the last observation)
sm2 = sma(tsdat, h=1, holdout = TRUE, silent=FALSE,interval="l")
forecast(sm2)
fc2 = forecast(sm2)$forecast
forecast(sm2)$lower[1]
forecast(sm2)$upper[1]
errors(as.numeric(tsdat)[N], fc2) # analysis of SMA model
### AUTOREGRESSION: AR(1)
vdat = as.numeric(tsdat)[-N]
vN = length(vdat)
vdat_level = vdat[-1]
vdat_lags = vdat[-vN]
armod = lm(vdat_level ~ vdat_lags)
summary(armod)
# Forecast
new = data.frame(vdat_lags = as.numeric(tsdat)[N])
frct = predict(armod, newdata =new, interval="confidence", level=0.95)
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
head(dat)
tail(dat)
dat
dat[-1]
dat[1]
dat[2]
dat[-1,]
dat[,-1]
dat[]
dat
frct
frct
new
frct
vdat
vN
summary(armod)
frct
vN
N
errors(as.numeric(tsdat)[N], frct[1]) # analysis of SMA model
